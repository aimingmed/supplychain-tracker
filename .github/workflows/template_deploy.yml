name: Template Deploy

on:
  workflow_call:
    inputs:
      projectName:
        required: true
        type: string
      namespace:
        required: true
        type: string
      chartPath:
        required: false
        type: string
        default: app/helm/sctracker
      releaseName:
        required: false
        type: string
        default: sctracker
      ingressDomain:
        required: false
        type: string
        default: ""
      ingress2Domain:
        required: false
        type: string
        default: ""
      imageTag:
        required: true
        type: string
      override:
        required: false
        type: string
        default: ""
      stageName:
        required: true
        type: string
      environment:
        required: false
        type: string

jobs:
  deploy:
    runs-on: LeeMBP
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Create namespace if not exists
        run: |
          kubectl get namespace ${{ inputs.namespace }} || kubectl create namespace ${{ inputs.namespace }}

      - name: Create imagePullSecret for ghcr.io
        run: |
          set -e
          echo "USERNAME is set: [${{ secrets.USERNAME }}]"
          echo "PERSONAL_ACCESS_TOKEN is set: [${{ secrets.PERSONAL_ACCESS_TOKEN != '' && 'yes' || 'no' }}]"
          kubectl create secret docker-registry ghcr-cred \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.USERNAME }} \
            --docker-password=${{ secrets.PERSONAL_ACCESS_TOKEN }} \
            --docker-email=devnull@github.com \
            --namespace ${{ inputs.namespace }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm upgrade
        run: |
          helm upgrade --install ${{ inputs.releaseName || 'sctracker' }} ${{ inputs.chartPath || 'app/helm/sctracker' }} \
            --namespace ${{ inputs.namespace }} \
            -f ${{ inputs.chartPath || 'app/helm/sctracker' }}/values.yaml \
            --set image.tag=${{ inputs.imageTag }}